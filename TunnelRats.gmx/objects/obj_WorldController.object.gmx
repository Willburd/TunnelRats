<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_World</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_gameUpdatedParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controller for spawning world chunks
worldName = global.worldInitialName;
UniverseNumber = 0;
global.currentLayer = 0;

//temp, going to be called after creating this later by a control object that handles world file/universe/layer selection
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// called from obj_WorldChunk's room end function on unload
ds_list_destroy(loadedChunkList);
ds_list_destroy(pendingEntitySpawns);

scr_EntityPlayerSave(global.PlayerProfile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init world

// setup entity loader, and chunk spawning controls!
pendingEntitySpawns = ds_list_create();
loadedChunkList = ds_list_create();
var TLgridX = (floor(view_xview[0] / (global.chunkWidth  * 16))-1) * (global.chunkWidth  * 16);
var TLgridY = (floor(view_yview[0] / (global.chunkHeight * 16))-1) * (global.chunkHeight * 16);

x = TLgridX + (global.chunkWidth*16*2);
y = TLgridY + (global.chunkHeight*16*1);

// setup world data based on the seed(for fresh chunks!)
var playerData = -1;
if(file_exists(working_directory + "/Worlds/" + string(worldName) + "/World.dat"))
{
    // load previous data
    scr_LoadWorld(worldName,UniverseNumber);
    
    // load the player
    global.PlayerProfile = scr_EntityPlayerLoad(global.PlayerProfileName);
    
    // warp camera to player profile
    with obj_HudController
    {
        x = global.PlayerProfile[? "EntityX"];
        y = global.PlayerProfile[? "EntityY"];
        view_xview[0] = floor( x-view_wview[0]/2);
        view_yview[0] = floor( y-view_hview[0]/2);
    }
    
    // clear loader
    global.worldInitialName = -1;
    global.worldInitialSeed = -1;
}
else
{
    // create world
    scr_WorldGen(global.worldInitialSeed,worldName); 
    scr_SaveWorld(worldName, UniverseNumber);

    // force set player info to -1 to trigger a spawn
    global.PlayerProfile = -1;
    
    // clear loader
    global.worldInitialName = -1; 
    global.worldInitialSeed = -1;
}


// spawn player if one has not been found!
if(global.PlayerProfile == -1)
{
    global.PlayerProfile = scr_EntityPlayerProfileCreate(global.PlayerProfileName,128,80,0,UniverseNumber,global.currentLayer)

    scr_EntityRealizePlayer(global.PlayerProfile,id,true);
    scr_EntityPlayerSave(global.PlayerProfile);
}

   
//check if layer biome data exists
if(file_exists(working_directory + "/Worlds/" + string(worldName) + "/Universe" + string(UniverseNumber) + "/Chunks/LayerData_" + string(global.currentLayer) + ".dat"))
{
    // load layer biomes
    global.layerLoadedBiomes = scr_LayerLoadBiomes(worldName,UniverseNumber);
}
else
{
    // gen layer biomes
    if(global.layerLoadedBiomes != -1)
    {
        ds_list_destroy(global.layerLoadedBiomes);
    }
    global.layerLoadedBiomes = scr_LayerGetBiomes(global.currentLayer);
    scr_LayerSaveBiomes(worldName,UniverseNumber);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move along chunk sized steps, and do a chunk spawn check
// based on the view's current location!
var chunkW = global.chunkWidth * 16;
var chunkH = global.chunkHeight * 16;

var TLgridX = (floor(view_xview[0] / chunkW)-1) * chunkW;
var TLgridY = (floor(view_yview[0] / chunkH)-1) * chunkH;


// stepping movements
var chunkBorder = 1;
x += chunkW;
if(x &gt; view_xview[0] + view_wview[0] + (chunkW*chunkBorder))
{
    x = TLgridX - (chunkW*chunkBorder);
    y += chunkH;
}
if(y &gt; view_yview[0] + view_hview[0] + chunkH*chunkBorder)
{
    y = TLgridY - (chunkH*chunkBorder);
}


// spawn chunks
global.loadingTimer--;
if(global.loadingTimer &lt;= 0)
{
    scr_ChunkSpawn(id,x,y); // script sets the global.loadingTimer
}


// entity loading control
if(ds_list_size(pendingEntitySpawns) &gt; 0)
{
    with pendingEntitySpawns[| 0] event_user(0); // attempt spawn
    if(pendingEntitySpawns[| 0].ActiveChunk != noone)
    {
        // clear from list
        ds_list_delete(pendingEntitySpawns,0);
    }
}


// update chunks
global.unloadingTimer += 1;
for (i=0; i&lt;ds_list_size(loadedChunkList); i+=1)
{
    var chunk = loadedChunkList[| i];
    if(chunk.updateTimer &lt; -chunk.updateTimerMax &amp;&amp; global.unloadingTimer &gt;= 2)
    {
        // out of range!
        with chunk instance_destroy();
        global.unloadingTimer = 0;
    }
    else
    {
        // process chunk!
        var viewDist = point_distance(view_xview[0]+(view_wview[0]/2),view_yview[0]+(view_hview[0]/2),chunk.x + (chunkW/2),chunk.y + (chunkH/2));
        var reRenderChance = 600*inverse_lerp(view_wview[0],-100,viewDist); // higher chance to rerender when near middle of view
        scr_ChunkUpdate(chunk, (random(reRenderChance) &lt; 1) );
        if(chunk.processing)
        {
            scr_ChunkEntityUpdate(chunk);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
