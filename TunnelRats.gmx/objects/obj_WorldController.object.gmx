<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_World</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controller for spawning world chunks
worldName = global.worldInitialName;
UniverseNumber = 0;
LoadedLayer = 0;
loadedChunkList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// called from obj_WorldChunk's room end function on unload
ds_list_destroy(loadedChunkList);
scr_SaveWorld(worldName,UniverseNumber);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move along chunk sized steps, and do a chunk spawn check
// based on the view's current location!
var chunkW = global.chunkWidth * global.tilePixelSize;
var chunkH = global.chunkHeight * global.tilePixelSize;

var TLgridX = (floor(view_xview[0] / chunkW)-1) * chunkW;
var TLgridY = (floor(view_yview[0] / chunkH)-1) * chunkH;


// stepping movements
var chunkBorder = 1;
x += chunkW;
if(x &gt; view_xview[0] + view_wview[0] + (chunkW*chunkBorder))
{
    x = TLgridX - (chunkW*chunkBorder);
    y += chunkH;
}
if(y &gt; view_yview[0] + view_hview[0] + chunkH*chunkBorder)
{
    y = TLgridY - (chunkH*chunkBorder);
}


// Process meta chunks! start with the layer aboves...
var aboveStructure = -1;
if(LoadedLayer &gt; 0)
{
    aboveStructure = scr_MetaChunkGetStructure(x,y,LoadedLayer-1,-1,id);
}
// now the current layer
var currentStructure = -1;
currentStructure = scr_MetaChunkGetStructure(x,y,LoadedLayer,aboveStructure,id);


// spawn chunks
global.loadingTimer--;
if(global.loadingTimer &lt;= 0)
{
    scr_ChunkSpawn(id,x,y); // script sets the global.loadingTimer
}


// entity loading control
with obj_WorldEntityParent
{
    // not yet spawned!
    if(ActiveChunk == noone)
    {
        scr_ChunkForceSpawn(other.id,id.x,id.y);
        scr_EntityDetectCurrentChunk(id);
    }
    
    // ready for next update!
    EntityData[? "NeedUpdate"] = true;
}


// update chunks
global.chunkUpdateBudget = 0;
global.unloadingTimer += 1;
for (i=0; i&lt;ds_list_size(loadedChunkList); i+=1)
{
    var chunk = loadedChunkList[| i];
    if(chunk.updateTimer &lt; -chunk.updateTimerMax &amp;&amp; global.unloadingTimer &gt;= 2)
    {
        // out of range!
        with chunk instance_destroy();
        global.unloadingTimer = 0;
    }
    else
    {
        // process chunk!
        var viewDist = point_distance(view_xview[0]+(view_wview[0]/2),view_yview[0]+(view_hview[0]/2),chunk.x + (chunkW/2),chunk.y + (chunkH/2));
        var reRenderChance = 400*inverse_lerp(view_wview[0],-50,viewDist); // higher chance to rerender when near middle of view
        scr_ChunkUpdate(chunk, (random(reRenderChance) &lt; 1) );
        if(chunk.processing)
        {
            scr_ChunkEntityUpdate(chunk);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
