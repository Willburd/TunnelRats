<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_World</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_gameUpdatedParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentWorld = noone
nextWorld = noone;
currentLayer = 0;
nextLayer = 0;
currentUniverse = 0;
nextUniverse = 0;

firstLoad = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(currentLayer != nextLayer || currentUniverse != nextUniverse || firstLoad)
{
    currentLayer = nextLayer;
    currentUniverse = nextUniverse;
    nextWorld = instance_create(0,0,obj_WorldController);
    with nextWorld
    {
        if(other.firstLoad == true)
        {
            // setup world data based on the seed(for fresh chunks!)
            var playerData = -1;
            if(file_exists(working_directory + "/Worlds/" + string(worldName) + "/World.dat"))
            {
                // load previous data
                scr_LoadWorld(worldName,UniverseNumber);
                
                // load the player
                global.PlayerProfile = scr_EntityPlayerLoad(global.PlayerProfileName);
                
                // warp camera to player profile
                with obj_HudController
                {
                    x = global.PlayerProfile[? "EntityX"];
                    y = global.PlayerProfile[? "EntityY"];
                    view_xview[0] = floor( x-view_wview[0]/2);
                    view_yview[0] = floor( y-view_hview[0]/2);
                }
            }
            else
            {
                // create world
                scr_WorldGen(global.worldInitialSeed,worldName); 
                scr_SaveWorld(worldName, UniverseNumber);
            
                // force set player info to -1 to trigger a spawn
                global.PlayerProfile = -1;
            }
            
            // clear loader
            global.worldInitialName = -1; 
            global.worldInitialSeed = -1;
            
            // spawn player if one has not been found!
            if(global.PlayerProfile == -1)
            {
                global.PlayerProfile = scr_EntityPlayerProfileCreate(global.PlayerProfileName,128,80,0,UniverseNumber,LoadedLayer)
            
                var playerInst = scr_EntityRealizePlayer(global.PlayerProfile,id,true);
                ds_map_add_map(global.PlayerProfile, "EntData", playerInst.EntityData);
                scr_EntityPlayerSave(global.PlayerProfile);
            }
            else
            {
                scr_EntityRealizeInstance(global.PlayerProfile[? "EntData"],noone,id,false);
            }
            
            // load layer from file, and lock it in
            other.currentUniverse = global.PlayerProfile[? "EntityUniverse"];
            other.currentLayer =    global.PlayerProfile[? "EntityLayer"];
            other.nextLayer = other.currentLayer; 
            other.nextUniverse = other.currentUniverse;
        }
        else
        {
            // move a loaded player between layers
            if(global.PlayerProfile[? "EntityLayer"] == other.currentLayer &amp;&amp; global.PlayerProfile[? "EntityUniverse"] == other.currentUniverse)
            {
                global.PlayerProfile = scr_EntityPlayerLoad(global.PlayerProfileName);
                scr_EntityRealizeInstance(global.PlayerProfile[? "EntData"],noone,id,false);
            }
        }
        
        // trigger load!
        other.firstLoad = false;
        LoadedLayer = other.currentLayer;
        UniverseNumber = other.currentUniverse;
    }
}

if(nextWorld != noone)
{
    //clean old world
    with obj_WorldChunk instance_destroy(); 
    with currentWorld instance_destroy();
    currentWorld = nextWorld;
    nextWorld = noone;
    
    with currentWorld
    {
        // setup entity loader, and chunk spawning controls!
        var TLgridX = (floor(view_xview[0] / (global.chunkWidth  * global.tilePixelSize))-1) * (global.chunkWidth  * global.tilePixelSize);
        var TLgridY = (floor(view_yview[0] / (global.chunkHeight * global.tilePixelSize))-1) * (global.chunkHeight * global.tilePixelSize);
        
        x = TLgridX + (global.chunkWidth*global.tilePixelSize*2);
        y = TLgridY + (global.chunkHeight*global.tilePixelSize*1);
        
        //check if layer biome data exists
        if(file_exists(working_directory + "/Worlds/" + string(worldName) + "/Universe" + string(UniverseNumber) + "/Chunks/LayerData_" + string(LoadedLayer) + ".dat"))
        {
            // load layer biomes
            global.layerLoadedBiomes = scr_LayerLoadBiomes(worldName,UniverseNumber,LoadedLayer);
        }
        else
        {
            // gen layer biomes
            if(global.layerLoadedBiomes != -1)
            {
                ds_list_destroy(global.layerLoadedBiomes);
            }
            global.layerLoadedBiomes = scr_LayerGetBiomes(LoadedLayer);
            scr_LayerSaveBiomes(worldName,UniverseNumber,LoadedLayer);
        }
    }
}

with currentWorld
{
    event_user(0);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="109">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nextLayer = currentLayer-1;
global.PlayerProfile[? "EntityLayer"] = nextLayer;
global.PlayerProfile[? "EntityUniverse"] = 0;
scr_EntityPlayerSave(global.PlayerProfile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nextLayer = currentLayer+1;
global.PlayerProfile[? "EntityLayer"] = nextLayer;
global.PlayerProfile[? "EntityUniverse"] = 0;
scr_EntityPlayerSave(global.PlayerProfile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_Cleanup);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
