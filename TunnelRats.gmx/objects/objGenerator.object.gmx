<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

randomize();

// Width, height, and scale of generated map
// Width and height are the actual generation size
// and scale is the display size
width = 100;
height = 100;
scale = 2;

// Number of layered octaves
octaves = 1;

// Resolution (pixels) of a single graphical tile
res = 1;

// Grid for generation vectors and held values
octvectors = scrOctaveGen(octaves);
octvalgrid = ds_grid_create(width * scale, height * scale);

scrGenerateOctaveNoise(octvalgrid, octvectors);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw map with (optional) vectors on top

for (var xx = 0; xx &lt; width * scale; ++xx)
{
    for (var yy = 0; yy &lt; height * scale; ++yy)
    {
        draw_set_color(scrGetColor(ds_grid_get(octvalgrid, xx, yy)));
        draw_rectangle(xx * res, yy * res, (xx + 1) * res, (yy + 1) * res, false);
    }
}

// Draw generation vectors
/*
for (var xx = 0; xx &lt; width; ++xx)
{
    for (var yy = 0; yy &lt; height; ++yy)
    {
        var tilesize = res * scale;
        var tempx = xx * tilesize;
        var tempy = yy * tilesize;
        var tempvec = ds_grid_get(vectorgrid, xx, yy);
        draw_line(tempx, tempy, tempx + lengthdir_x(tilesize, tempvec), tempy + lengthdir_y(tilesize, tempvec));
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
