<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerSuction</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// entity Linked Data
playerID = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_PickupItem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// suck towards center
if(playerID != noone &amp;&amp; playerID.EntityData != -1)
{
    // pull entity toward on collision
    var dis = point_distance(other.x,other.y,x,y);
    var dir = point_direction(other.x,other.y,x,y);
    
    if(dis &lt; 8 &amp;&amp; other.pickupDelay &lt;= 0)
    {
        if(scr_EntityAddToInventory(playerID.EntityData,other.EntityData))
        {
            with other instance_destroy();
        }
        else
        {
            with other pickupDelay = 60;
        }
    }
    else if(abs(angle_difference(other.Ndirection,dir)) &lt; 45)
    {
        if(other.pickupDelay &lt;= 0)
        {
            other.Ndirection += scr_DTscale( angle_difference(other.Ndirection,dir)/20);
            other.Nmomentum += scr_DTscale( dis/20);
        }
    }
    else
    {
        if(other.pickupDelay &lt;= 0)
        {
            other.Nmomentum *= scr_DTmultiplier(-0.15);
            if(other.Nmomentum &lt;= 0.01)
            {
                other.Ndirection = dir;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
