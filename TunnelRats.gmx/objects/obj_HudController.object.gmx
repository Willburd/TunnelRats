<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>obj_alwaysUpdatedParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>followObject = noone;

// Player UI control
MenuIndex[0] = -1;
MenuIndex[1] = -1;

MenuExpand[0] = 0;
MenuExpand[1] = 0;

entityInventorySize = 0;
dropCoolDown = false;

// Player tools
toolUseCounter = 0;

previousToolX = 0;
previousToolY = 0;

myHighlight = noone;
toolGlow = 0.3 * (0.5 + (sin(global.animationStep/20)/4));

currentToolLock = true; // this is set when the inventory buttons change, and cleared when you release both buttons, used to prevent autoclicking with items you just got!
MenuData[0] = -1;
MenuData[1] = -1;
PreviousMenuData[0] = MenuData[0];
PreviousMenuData[1] = MenuData[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update
if(!global.gamePaused)
{
    if(followObject == noone)
    {
        // idle no follow state
        QMenuIndex = -1;
        EMenuIndex = -1;
    }
    else if(followObject == id)
    {
        show_debug_message("Camera self assigned self as follow object?")
        followObject = noone;
    }
    else if(instance_exists(followObject))
    {
        depth = followObject.depth-99999999;
        
        // only move when not paused
        var dir = point_direction(x,y, followObject.x, followObject.y);
        var dis = point_distance(x,y, followObject.x, followObject.y) * 0.1;
        x += lengthdir_x(dis,dir);
        y += lengthdir_y(dis,dir);
        
        part_system_depth( global.partSys, scr_DrawDepth(followObject.x, followObject.y, followObject.z ) - 99999);
        
        // inventory UI
        entityInventorySize = 0;
        if(followObject.EntityData != -1)
        {
            if(!is_undefined(followObject.EntityData[? "Inventory"]))
            {
                var invCap = followObject.EntityData[? "InventorySize"];
                entityInventorySize = invCap;
                if(MenuIndex[0] == -1) MenuIndex[0] = 0;
                if(MenuIndex[1] == -1) MenuIndex[1] = 1;
                
                MenuIndex[0] = clamp(MenuIndex[0],0,invCap-1);
                MenuIndex[1] = clamp(MenuIndex[1],0,invCap-1);
            }
        }
        
        // Inventory draw menus
        for (var i=0; i&lt;2; i+=1)
        {
            var allow = false;
            if(i == 0) allow = keyboard_check(global.keyItemRotateLeft);
            if(i == 1) allow = keyboard_check(global.keyItemRotateRight);
            
            if(allow &amp;&amp; MenuExpand[i] &gt; -1)
            {
                MenuExpand[i] += scr_DTscale(0.15);
                if(MenuExpand[i] &gt; 1) MenuExpand[i]= 1;
            }
            else
            {
                MenuExpand[i] *= scr_DTmultiplier(-0.2);
                if(abs(MenuExpand[i]) &lt; 0.01) MenuExpand[i] = 0;
            }
        }
    }
    else
    {
        show_debug_message("Camera lost assigned object?")
        followObject = noone;
    }
    
    // camera update
    view_xview[0] = floor( x-view_wview[0]/2);
    view_yview[0] = floor( y-view_hview[0]/2);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player unique update
if(!global.gamePaused)
{
    if(instance_exists(followObject) &amp;&amp; followObject.object_index == obj_Player)
    {
        // tool highlighter
        if(!instance_exists(myHighlight))
        {
            toolGlow = 0.3 * (0.5 + (sin(global.animationStep/20)/4));
            myHighlight = instance_create(x,y,obj_HighLightBlock);
        }
        
        // Using a tool!
        var toolX = 0;
        var toolY = 0;
        
        // mouse aiming
        var dir = point_direction(followObject.x,followObject.y-8,mouse_x,mouse_y);
        var dis = clamp(point_distance(followObject.x,followObject.y-8,mouse_x,mouse_y),0,64);
        toolX = followObject.x + lengthdir_x(dis,dir);
        toolY = followObject.y + lengthdir_y(dis,dir);
        
        // check if tool use is consistant!
        var usingTool = false;
        if(currentToolLock)
        {
            if(mouse_check_button(mb_left) == false &amp;&amp; mouse_check_button(mb_right) == false )
            {
                currentToolLock = false;
            }
        }
        else if(followObject.prevCrouching != followObject.crouching)
        {
            // reset tool
            toolUseCounter = -1;
        }
        else if(floor(followObject.x/16) != floor(followObject.xprevious/16) || floor(followObject.y/16) != floor(followObject.yprevious/16) || followObject.z != followObject.attemptedGround)
        {
            // reset tool
            toolUseCounter = -1;
        }
        else if(floor(previousToolX/16) != floor(toolX/16) || floor(previousToolY/16) != floor(toolY/16))
        {
            // reset tool
            toolUseCounter = -1;
        }
        else if( keyboard_check(global.keyItemRotateLeft) ||  keyboard_check(global.keyItemRotateRight))
        {
            // reset tool
            toolUseCounter = -1;
        }
        else if( mouse_check_button(mb_left) ^^ mouse_check_button(mb_right) )
        {
            // tool is consistant and counting up!
            usingTool = true;
        }
        else
        {
            // tool recovery counter when not in use
            if(toolUseCounter&lt;0)
            {
                toolUseCounter += scr_DTscale(0.2);
                
            }
            else
            {
                toolUseCounter = 0;
            }
        }
        
        // acts different base on if placing or breaking!
        var toolLocX = floor((toolX)/16)*16;
        var toolLocY = floor((toolY)/16)*16;
        myHighlight.x = toolLocX;
        myHighlight.y = toolLocY;
        myHighlight.depth = scr_DrawDepth(myHighlight.x,myHighlight.y,myHighlight.z)-1;
        
        if(usingTool)
        {
            var selection = BlockGridType.walls;
            if(followObject.crouching) selection = BlockGridType.floors;
            
            // perform action based on held item!
            var inventory = followObject.EntityData[? "Inventory"];
            if(mouse_check_button(mb_left)) 
            {
                var slotData = inventory[| MenuIndex[0]];
            
                var spawn = -1;
                if(!is_undefined(slotData) &amp;&amp; slotData != -1 &amp;&amp; slotData[| 1] &gt; 0)
                {
                    spawn = slotData[| 0];
                }
                
                // use item and check for decrimenting
                if(scr_PlayerUseItem(id,followObject.ActiveChunk,toolLocX ,toolLocY, spawn, selection))
                {
                    // count down and remove stuff from inventory!
                    if(spawn != -1)
                    {
                        slotData[| 1] -= 1;
                        if(slotData[| 1] &lt;= 0)
                        {
                            ds_list_destroy(inventory[| MenuIndex[0]]); 
                            inventory[| MenuIndex[0]] = -1;
                        }
                    }
                }
            }
            else if(mouse_check_button(mb_right)) 
            {
                var slotData = inventory[| MenuIndex[1]];
            
                var spawn = -1;
                if(!is_undefined(slotData) &amp;&amp; slotData != -1 &amp;&amp; slotData[| 1] &gt; 0)
                {
                    spawn = slotData[| 0];
                }
                
                // use item and check for decrimenting
                if(scr_PlayerUseItem(id,followObject.ActiveChunk,toolLocX ,toolLocY, spawn, selection))
                {
                    // count down and remove stuff from inventory!
                    if(spawn != -1)
                    {
                        slotData[| 1] -= 1;
                        if(slotData[| 1] &lt;= 0)
                        {
                            ds_list_destroy(inventory[| MenuIndex[1]]); 
                            inventory[| MenuIndex[1]] = -1;
                        }
                    }
                }
            }
        }
        else
        {
            myHighlight.image_alpha = lerp(myHighlight.image_alpha,toolGlow,0.6);
        }
        
        // store previous tool data
        previousToolX = toolX;
        previousToolY = toolY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ingame draws
if(followObject != noone)
{
    if(followObject.EntityData != -1)
    {
    
    
        // Item menus!
        var highlightItemString = "";
        if(!is_undefined(followObject.EntityData[? "Inventory"]))
        {
            var entryY = view_yview[0]+8;
            var menuStart = (view_xview[0] + view_wview[0]) - 56;
            var textScale = 1.75;
            var inventorySlots = followObject.EntityData[? "Inventory"];
            
            for (var i=0; i&lt;2; i+=1)
            {
                var entryX = menuStart;
                var menuChr = chr(global.keyItemRotateLeft);
                if(i == 1) {
                    entryX = menuStart+32;
                    menuChr = chr(global.keyItemRotateRight);
                }
                
                
                
                draw_sprite(spr_MenuBarEquipment,0,entryX,entryY);
                draw_set_font(global.font);
                draw_set_halign(fa_left);
                draw_text_transformed_colour(entryX+2,entryY+2,menuChr,textScale,textScale,0,c_ltgray,c_ltgray,c_ltgray,c_ltgray,1);
                
                
                
                // tool locking
                PreviousMenuData[i] = MenuData[i];
                MenuData[i] = -1;
                // draw the new sprite
                if(MenuIndex[i] &lt; ds_list_size(inventorySlots) &amp;&amp; !is_undefined(inventorySlots[| MenuIndex[i]]) &amp;&amp; inventorySlots[| MenuIndex[i]] != -1)
                {
                    var slotData = inventorySlots[| MenuIndex[i]];
                    var EntDat = scr_EntityGetLibraryDef( slotData[| 0]);
                    MenuData[i] = EntDat;
                    draw_sprite_ext(scr_EntityGetSprite(EntDat),0,entryX+8,entryY+8,1,1,0,image_blend,1);
                }
                if(PreviousMenuData[i] != MenuData[i])
                {
                    currentToolLock = true;
                }
                
                var offsetLevel = 16;
                
                if(MenuExpand[i] &gt; 0)
                {
                    var mouseYExtract = mouse_y;
                    var ypush = clamp((mouseYExtract- (entryY+16)),0, offsetLevel);
                    var clampedMouse = clamp(ypush + mouseYExtract,entryY + ((offsetLevel) * MenuExpand[i]), entryY + ((16 + offsetLevel) * MenuExpand[i]) + ((8*(entityInventorySize-1)) * MenuExpand[i]));
                    for (var t=0; t&lt;entityInventorySize; t+=1)
                    {
                        var yyDraw = entryY + ((ypush + offsetLevel) * MenuExpand[i]) + ((8*t) * MenuExpand[i]);
                        var yDetector = clamp(( yyDraw - clampedMouse) / 16,-1,1) * MenuExpand[i];
                        
                        draw_sprite_ext(spr_MenuBarSelect,floor(MenuIndex[i]) == t,entryX,(yyDraw + (yDetector*offsetLevel)),1,1,0,image_blend,clamp(MenuExpand[i],0,1));
                        
                        var selected = false;
                        if(point_in_rectangle(mouse_x,mouse_y,entryX,(yyDraw + (yDetector*offsetLevel)),entryX+16,yyDraw + (yDetector*offsetLevel)+16))
                        {
                            selected = true;
                            if(mouse_check_button(mb_right))
                            {
                                if(!dropCoolDown)
                                {
                                    var newEnt = scr_EntityThrowFromInventory(followObject.EntityData,t,followObject.ActiveChunk,followObject.x,followObject.y,followObject.z);
                                    
                                    /// random xyz direction
                                    newEnt.Zmomentum = -(2 + random(1));
                                    newEnt.Nmomentum = 2 + random(2);
                                    newEnt.Ndirection = followObject.Ndirection;
                                }
                                dropCoolDown = true;
                            }
                            else if(mouse_check_button(mb_left))
                            {
                                if(!dropCoolDown)
                                {
                                    MenuIndex[i] = t;
                                }
                                dropCoolDown = true;
                            }
                            else
                            {
                                dropCoolDown = false;
                            }
                        }
                        
                        
                        if(t &lt; ds_list_size(inventorySlots) &amp;&amp; !is_undefined(inventorySlots[| t]) &amp;&amp; inventorySlots[| t] != -1)
                        {
                            var slotData = inventorySlots [| t];
                            var EntDat = scr_EntityGetLibraryDef( slotData[| 0]);
                            if(selected)
                            {
                                highlightItemString = string_upper(EntDat[? "DisplayName"] );
                            }
                            
                            draw_sprite_ext(scr_EntityGetSprite(EntDat),0,entryX+8,(yyDraw + 8 + (yDetector*offsetLevel)),1,1,0,image_blend,clamp(MenuExpand[i],0,1));
                            
                            draw_set_halign(fa_right);
                            draw_set_font(global.fontTinyNums)
                            draw_text_colour(entryX + 14,yyDraw + (yDetector*offsetLevel) + 9,string(slotData[| 1]),c_white,c_white,c_white,c_white,clamp(MenuExpand[i],0,1));
                        }
                    }
                }
                
                
                // Draw equipped items!
                var slotData = inventorySlots[| MenuIndex[i]];
                if(!is_undefined(slotData) &amp;&amp; slotData != -1)
                {
                    var EntDat = scr_EntityGetLibraryDef( slotData[| 0]);
                    if(slotData[| 1] &gt; 1)
                    {
                        draw_set_halign(fa_right);
                        draw_set_font(global.fontTinyNums)
                        draw_text_colour(entryX + 14,entryY + 9,string(slotData[| 1]),c_white,c_white,c_white,c_white,1);
                    }
                }
            }
        }
        
        
        
        // Item highlight text
        draw_set_font(global.font);
        draw_text(mouse_x,mouse_y-4,highlightItemString );
        draw_set_halign(fa_left);
        
        
        
        
        // Hearts
        if(!is_undefined(followObject.EntityData[? "Health"]))
        {
            var menuStart = view_xview[0]+ 8;
            var heartCount = 0;
            var healthPips = followObject.EntityData[? "Health"];
            
            while (healthPips &gt; 0)
            {
                var xoffset = heartCount*14;
                var yoffset = floor(heartCount/25)*14;
            
                draw_sprite(spr_MenuHealth,clamp(healthPips,-1,3)+1,menuStart+xoffset,view_yview[0]+8+yoffset);
                healthPips -= 4;
                heartCount += 1; 
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
