<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>obj_alwaysUpdatedParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>followObject = noone;

// Player UI control
QMenuIndex = -1;
EMenuIndex = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update
if(!global.gamePaused)
{
    if(followObject == noone)
    {
        // idle no follow state
        QMenuIndex = -1;
        EMenuIndex = -1;
    }
    else if(followObject == id)
    {
        show_debug_message("Camera self assigned self as follow object?")
        followObject = noone;
    }
    else if(instance_exists(followObject))
    {
        depth = followObject.depth-99999999;
        
        // only move when not paused
        var dir = point_direction(x,y, followObject.x, followObject.y);
        var dis = point_distance(x,y, followObject.x, followObject.y) * 0.1;
        x += lengthdir_x(dis,dir);
        y += lengthdir_y(dis,dir);
        
        part_system_depth( global.partSys, scr_DrawDepth(followObject.x, followObject.y, followObject.z ) - 99999);
        
        // inventory UI
        if(followObject.EntityData != -1)
        {
            if(!is_undefined(followObject.EntityData[? "Inventory"]))
            {
                var invCap = followObject.EntityData[? "InventorySize"];
                QMenuIndex = clamp(QMenuIndex,0,invCap-1);
                EMenuIndex = clamp(EMenuIndex,0,invCap-1);
            }
        }
    
    }
    else
    {
        show_debug_message("Camera lost assigned object?")
        followObject = noone;
    }
    
    view_xview[0] = floor( x-view_wview[0]/2);
    view_yview[0] = floor( y-view_hview[0]/2);
}
// maybe add pause menu here?

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ingame draws
if(followObject != noone)
{
    if(followObject.EntityData != -1)
    {
        if(!is_undefined(followObject.EntityData[? "Inventory"]))
        {
            var menuStart = (view_xview[0] + view_wview[0]) - 56;
            var textScale = 1.75;
            
            draw_sprite(spr_MenuBarEquipment,0,menuStart,view_yview[0]+8);
            draw_text_transformed_colour(menuStart+2,view_yview[0]+8+2,chr(global.keyItemRotateLeft),textScale,textScale,0,c_ltgray,c_ltgray,c_ltgray,c_ltgray,1);
            QMenuIndex = -1;
            draw_sprite(spr_MenuBarEquipment,0,menuStart+32,view_yview[0]+8);
            draw_text_transformed_colour(menuStart+32+2,view_yview[0]+8+2,chr(global.keyItemRotateRight),textScale,textScale,0,c_ltgray,c_ltgray,c_ltgray,c_ltgray,1);
            EMenuIndex = -1;
        }
        
        if(!is_undefined(followObject.EntityData[? "Health"]))
        {
            var menuStart = view_xview[0]+ 8;
            var heartCount = 0;
            var healthPips = followObject.EntityData[? "Health"];
            
            while (healthPips &gt; 0)
            {
                var xoffset = heartCount*14;
                var yoffset = floor(heartCount/25)*14;
            
                draw_sprite(spr_MenuHealth,clamp(healthPips,-1,3)+1,menuStart+xoffset,view_yview[0]+8+yoffset);
                healthPips -= 4;
                heartCount += 1; 
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
