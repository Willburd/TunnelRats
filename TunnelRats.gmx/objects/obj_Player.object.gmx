<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_colMask8x</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_WorldEntityParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Data
Nmomentum = 0;
Zmomentum = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// first load code!
var foundGround = false
while (foundGround == false)
{
    var block = scr_ChunkGetBlock( ActiveChunk, x, y, z);
    
    if(block == -1)
    {
        z += 16;
    }
    else
    {
        foundGround = true;
        z -= 32;
        break;
    }
};


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement code
if(loadedCheck)
{
    var block = scr_ChunkGetBlock(ActiveChunk, x,y,z);
    if(block != -2) // do not move if block is unloaded
    {
        var UD = 0;
        var LR = 0;
        if(keyboard_check(global.keyLeft)) LR += -1;
        if(keyboard_check(global.keyRight)) LR += 1;
        if(keyboard_check(global.keyUp)) UD += -1;
        if(keyboard_check(global.keyDown)) UD += 1;
        
        // apply movement acceleration
        if(UD != 0 || LR != 0)
        {
            if(Nmomentum &lt; 4)
            {
                Nmomentum += 0.9;
            }
        }
        else
        {
            Nmomentum *= 0.2;
            if(Nmomentum &lt; 0.01)
            {
                Nmomentum = 0;
            }
        }
        var dir = point_direction(0,0, LR, UD);
        var dis = scr_TimeCompensate(Nmomentum);
        var lastX = x;
        var lastY = y;
        
        x += lengthdir_x(dis,dir);
        var colblock = scr_ChunkGetBlock(ActiveChunk, x,y,z);
        if( !(colblock != -2 &amp;&amp; (colblock == -1 || !ds_map_find_value(colblock,"Solid"))))
        {   
            // only allow walking into empty space
            x = lastX;
        }
        
        y += lengthdir_y(dis,dir);
        var colblock = scr_ChunkGetBlock(ActiveChunk, x,y + lengthdir_x(dis,dir),z);
        if( !(colblock != -2 &amp;&amp; (colblock == -1 || !ds_map_find_value(colblock,"Solid"))))
        {
        
            // only allow walking into empty space
            y = lastY;
        }
        
        
        
        // calculate falling speed
        Zmomentum += scr_TimeCompensate(global._gravity);
        
        
        // falling state control
        var hardFail = false;
        var landed = false;
        if(Zmomentum &gt;= 0)
        {
            var blockUnder = scr_ChunkGetBlock(ActiveChunk, x,y,z+8);
            if(blockUnder == -2)
            {
                // hard physics fail, due to unloaded chunk
                hardFail = true;
            }
            else if(blockUnder == -1 || ds_map_find_value(blockUnder,"Solid") == false) // quick check!
            {
                // full check!
                var fallIncrimenter = 8;
                while(fallIncrimenter &lt;= Zmomentum)
                {
                    var blockUnder = scr_ChunkGetBlock(ActiveChunk, x,y,z+fallIncrimenter);
                    if(blockUnder == -2)
                    {
                        // hard physics fail, due to unloaded chunk
                        hardFail = true;
                        break;
                    }
                    else if(blockUnder == -1 || ds_map_find_value(blockUnder,"Solid") == false)
                    {
                        // empty air!
                        fallIncrimenter += 8;
                    }
                    else
                    {
                        // found a block to land on!
                        // apply landing flag and snapZ
                        landed = true;
                        z = (floor((z + fallIncrimenter)/16)*16)-1;
                        // stop
                        Zmomentum = 0;
                        break;
                    }
                }
            }
            else
            {
                // block directly under us anyway
                // apply landing flag and snapZ
                landed = true;
                z = (floor((z+8)/16)*16)-1;
                // stop
                Zmomentum = 0;
            }
        }
        
        if(!hardFail) // hard physics fail, due to unloaded chunk, do not process z movements
        {
            // jump control
            if(landed)
            {
                if(keyboard_check(global.keyJump))
                {
                    Zmomentum = -30;
                }
            }
            
            // apply falling speed
            z += scr_TimeCompensate(Zmomentum);
        }
    }
    
    
    
    // draw depth
    depth = -99999999999;// scr_DrawDepth(x,y,z);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y + scr_DrawYOffset(x,y,z)-8,1,1,0,image_blend,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
