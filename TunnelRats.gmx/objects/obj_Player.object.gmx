<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_WorldEntityGravityParent</parentName>
  <maskName>spr_colMask8x</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Data
landingLag = 0;
holdingJumpStill = false;

toolUseCounter = 0;

previousToolX = 0;
previousToolY = 0;

myHighlight = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// landing event called by gravity parent
// landing dust puff.
part_particles_create(global.partSys,x + random_range(-8,8) ,y + random_range(-2,2), global.partLibrary[? "DustPuff"],8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// entity save called, write personal data before destruction
if(EntityData[? "Identity"] == global.PlayerProfile[? "ProfileName"])
{
    scr_EntityPlayerProfileUpdate(EntityData[? "Identity"],x,y,z,worldController.UniverseNumber,global.currentLayer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement code
if(loadedCheck)
{
    // control XY movement
    var UD = 0;
    var LR = 0;
    if(keyboard_check(global.keyLeft)) LR += -1;
    if(keyboard_check(global.keyRight)) LR += 1;
    if(keyboard_check(global.keyUp)) UD += -1;
    if(keyboard_check(global.keyDown)) UD += 1;
    
    // apply movement acceleration
    if(UD != 0 || LR != 0)
    {
        var maxSpd = 0.8;
        if(keyboard_check(global.keySprint))
        {
            maxSpd = 1.5;
        }
        if(Nmomentum &lt; maxSpd)
        {
            Nmomentum += scr_DTscale(0.3);
        }
        else
        {
            Nmomentum *= scr_DTmultiplier(-0.08);
        }
        Ndirection = point_direction(0,0, LR, UD);
    }
    else
    {
        Nmomentum *= scr_DTmultiplier(-0.15);
        if(Nmomentum &lt; 0.01)
        {
            Nmomentum = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump control
if(loadedCheck)
{
    if(z == attemptedGround)
    {
        // jump cooldown (maybe rolling animation?)
        landingLag -= scr_DTscale(1);
        
        // jumping!
        if(keyboard_check(global.keyJump) &amp;&amp; holdingJumpStill == false)
        {
            if(landingLag &lt;= 0)
            {
                if(keyboard_check(global.keySprint))
                {
                    // runjump
                    Zmomentum = -3;
                    Nmomentum *= 2;
                    landingLag = 5;
                }
                else
                {
                    // jump
                    Zmomentum = -3;
                    Nmomentum *= 1.1;
                    landingLag = 2;
                }
            }
        }
    }
    
    // prevent jump spam
    if(keyboard_check(global.keyJump))
    {
        holdingJumpStill = true;
    }
    else
    {
        holdingJumpStill = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tool use control!
if(loadedCheck)
{
    // tool highlighter
    if(!instance_exists(myHighlight))
    {
        myHighlight = instance_create(x,y,obj_HighLightBlock);
    }
    

    // Using a tool!
    var toolX = 0;
    var toolY = 0;
    
    // keyboard check!
    if(keyboard_check(global.keyUseLeft)) toolX += -1;
    if(keyboard_check(global.keyUseRight)) toolX += 1;
    if(keyboard_check(global.keyUseUp) &amp;&amp; toolX == 0) toolY += -1;
    if(keyboard_check(global.keyUseDown) &amp;&amp; toolX == 0) toolY += 1;
    
    
    
    var usingTool = false;
    // check if tool use is consistant!
    if(previousToolX != toolX || previousToolY != toolY || previousToolY != toolY)
    {
        // reset tool
        toolUseCounter = -1;
    }
    else if( toolX != 0 || toolY != 0)
    {
        // tool is consistant and counting up!
        toolUseCounter += scr_DTscale(0.025);
        usingTool = true;
    }
    else
    {
        // tool recovery counter when not in use
        if(toolUseCounter&lt;0)
        {
            toolUseCounter += scr_DTscale(0.1);
        }
        else
        {
            toolUseCounter = 0;
        }
    }
    
    
    // acts different base on if placing or breaking!
    if(usingTool)
    {
        myHighlight.visible = true;
        myHighlight.x = floor((x + (toolX * 16))/16)*16;
        myHighlight.y = floor((y + (toolY * 16))/16)*16;
        myHighlight.depth = scr_DrawDepth(myHighlight.x,myHighlight.y,myHighlight.z)-1;
        
        
        var blockPlaceMode = false;
        if( blockPlaceMode)
        {
            myHighlight.image_alpha = inverse_lerp(-1,0,toolUseCounter);
            if(toolUseCounter == 0)
            {
                // When placing blocks, do it instantly and than do cooldown
                if(scr_ChunkGetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16),BlockGridType.walls) == -1)
                {
                    var newBlock = scr_BlockInitData("Base:Brick");
                    newBlock[? "FirstSpawn"] = false;
                    scr_ChunkSetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16), newBlock,BlockGridType.walls);
                    scr_BlockTriggerUpdate(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16), BlockGridType.walls,true);
                }
                toolUseCounter = -1;
            }
        }
        else
        {
            myHighlight.image_alpha = inverse_lerp(0,1,max(-1,toolUseCounter));
            if(toolUseCounter &gt;= 1)
            {
                scr_BlockBreak(ActiveChunk, x + (toolX * 16), y + (toolY * 16),0,BlockGridType.walls);
                toolUseCounter = -1;
                part_particles_create(global.partSys,floor(((x + (toolX * 16))/16)*16)+8 ,(floor((y + (toolY * 16))/16)*16)+8, global.partLibrary[? "DustPuff"],10);
            }
        }
    }
    else
    {
        myHighlight.visible = false;
    }
    
    // store previous tool data
    previousToolX = toolX;
    previousToolY = toolY;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update depth info
depth = scr_DrawDepth(x,y,z);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set update flag
EntityData[? "NeedUpdate"] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(0,16, instance_number(obj_WorldEntityParent));
// draw_text(0,16, global._game_time / global._game_max_time);
/*
if(ActiveChunk != noone &amp;&amp; ActiveChunk.ground != -1 &amp;&amp; ActiveChunk.ground[# 0,0] != -1)
{
    var xx = floor((x-ActiveChunk.x) / 16);
    var yy = floor((y-ActiveChunk.y) / 16);

    if(xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; global.chunkWidth &amp;&amp; yy &lt; global.chunkHeight)
    {
        var block = ActiveChunk.ground[# xx,yy];
        draw_text(0,0,string_upper(block[? "Name"]));
    }
}
*/
if(ActiveChunk != noone &amp;&amp; ActiveChunk.bdata != -1 &amp;&amp; ActiveChunk.bdata[# 0,0] != -1)
{
    var biome = global.layerLoadedBiomes[| ActiveChunk.bdata[# 0,0]];
    draw_text(0,0,string_upper(biome[? "_InternalSaveName"]));
}
/*
if(instance_exists(ActiveChunk))
{
    for (q=0; q&lt;global.chunkWidth; q+=1)
    {
        for (c=0; c&lt;global.chunkHeight; c+=1)
        {
            draw_text(q*24,c*24,ActiveChunk.collisionData[# q,c]);
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_shadow,image_index,x,y + scr_DrawYOffset(attemptedGround),1,1,0,image_blend,1);
draw_sprite_ext(sprite_index,image_index,x,y + scr_DrawYOffset(z),1,1,0,image_blend,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat(irandom(10)) 
{
    with obj_WorldController
    {
        //var player = scr_EntitySpawn(other.x,other.y,obj_testPhysicsObject,id);
    }
    
    
    var xx = floor(x/16);
    var yy = floor(y/16);
    
    show_debug_message("Data at current XY ------------------------------------------------------------");
    show_debug_message("Temp " + string(scr_SafeData(global.worldData[? "TemperatureMap"]   ,xx,yy,global.temperatureMap_Scale)));
    show_debug_message("Humi " + string(scr_SafeData(global.worldData[? "HumidityMap"]      ,xx,yy,global.humidityMap_Scale)));
    show_debug_message("Wind " + string(scr_SafeData(global.worldData[? "WindMap"]          ,xx,yy,global.windMap_Scale)));
    show_debug_message("Magi " + string(scr_SafeData(global.worldData[? "MagicMap"]         ,xx,yy,global.magicMap_Scale)));
    show_debug_message("Evil " + string(scr_SafeData(global.worldData[? "EvilMap"]          ,xx,yy,global.evilMap_Scale)));
    show_debug_message("Deni " + string(scr_SafeData(global.worldData[? "DensityMap"]       ,xx,yy,global.densityMap_Scale)));
    show_debug_message("Cont " + string(scr_SafeData(global.worldData[? "ContinentMap"]     ,xx,yy,global.continentMap_Scale)));
    show_debug_message("Moun " + string(scr_SafeData(global.worldData[? "MountainMap"]      ,xx,yy,global.mountainMap_Scale)));
    show_debug_message("Hill " + string(scr_SafeData(global.worldData[? "HillMap"]          ,xx,yy,global.hillMap_Scale)));
    show_debug_message("------------------------------------------------------------------------------");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
