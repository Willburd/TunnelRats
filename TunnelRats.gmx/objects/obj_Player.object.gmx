<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_WorldEntityParent</parentName>
  <maskName>spr_colMask8x</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Data
Nmomentum = 0;
Zmomentum = 0;
attemptedGround = 0;

toolUseCounter = 0;

previousToolX = 0;
previousToolY = 0;

myHighlight = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// first spawn code!

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement code
var hasCamera = false;
with obj_HudController
{
    if(followObject == other.id) hasCamera = true;
}

if(loadedCheck)
{
    // tool highlighter
    if(!instance_exists(myHighlight))
    {
        myHighlight = instance_create(x,y,obj_HighLightBlock);
    }
    
    // Using a tool!
    var toolX = 0;
    var toolY = 0;
    
    // keyboard check!
    if(keyboard_check(global.keyUseLeft)) toolX += -1;
    if(keyboard_check(global.keyUseRight)) toolX += 1;
    if(keyboard_check(global.keyUseUp) &amp;&amp; toolX == 0) toolY += -1;
    if(keyboard_check(global.keyUseDown) &amp;&amp; toolX == 0) toolY += 1;
    
    
    
    var usingTool = false;
    // check if tool use is consistant!
    if(previousToolX != toolX || previousToolY != toolY || previousToolY != toolY)
    {
        // reset tool
        toolUseCounter = -1;
    }
    else if( toolX != 0 || toolY != 0)
    {
        // tool is consistant and counting up!
        toolUseCounter += 0.01;
        usingTool = true;
    }
    else
    {
        // tool recovery counter when not in use
        if(toolUseCounter&lt;0)
        {
            toolUseCounter += 1;
        }
        else
        {
            toolUseCounter = 0;
        }
    }
    
    
    // acts different base on if placing or breaking!
    if(usingTool)
    {
        myHighlight.visible = true;
        myHighlight.x = floor((x + (toolX * 16))/16)*16;
        myHighlight.y = floor((y + (toolY * 16))/16)*16;
        myHighlight.depth = scr_DrawDepth(myHighlight.x,myHighlight.y,myHighlight.z)-1;
        
        
        var blockPlaceMode = false;
        if( blockPlaceMode)
        {
            myHighlight.image_alpha = inverse_lerp(-1,0,toolUseCounter);
            if(toolUseCounter == 0)
            {
                // When placing blocks, do it instantly and than do cooldown
                if(scr_ChunkGetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16),BlockGridType.walls) == -1)
                {
                    var newBlock = scr_BlockInitData("Base:Brick");
                    scr_ChunkSetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16), newBlock,BlockGridType.walls);
                    scr_BlockTriggerUpdate(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16), BlockGridType.walls,true);
                }
                toolUseCounter = -1;
            }
        }
        else
        {
            myHighlight.image_alpha = inverse_lerp(0,1,max(-1,toolUseCounter));
            if(toolUseCounter &gt;= 1)
            {
                // test delete block!
                scr_ChunkSetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16),-1,BlockGridType.walls);
                scr_BlockTriggerUpdate(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16),BlockGridType.walls,true);
                toolUseCounter = -1;
            }
        }
    }
    else
    {
        myHighlight.visible = false;
    }
    
    // store previous tool data
    previousToolX = toolX;
    previousToolY = toolY;
    
    
    
    

    // control movement
    var UD = 0;
    var LR = 0;
    if(keyboard_check(global.keyLeft)) LR += -1;
    if(keyboard_check(global.keyRight)) LR += 1;
    if(keyboard_check(global.keyUp)) UD += -1;
    if(keyboard_check(global.keyDown)) UD += 1;
    
    // apply movement acceleration
    if(UD != 0 || LR != 0)
    {
        if(Nmomentum &lt; 10)
        {
            Nmomentum += 2.1;
        }
    }
    else
    {
        Nmomentum *= 0.08;
        if(Nmomentum &lt; 0.01)
        {
            Nmomentum = 0;
        }
    }
    var dir = point_direction(0,0, LR, UD);
    var dis = scr_TimeCompensate(Nmomentum);
    var lastX = x;
    var lastY = y;
    
    
    // x movements
    x += lengthdir_x(dis,dir);
    var colblock = scr_ChunkGetBlock(ActiveChunk, x,y,BlockGridType.walls);
    if( !(colblock == -1 || !scr_BlockRules(colblock,"Solid")))
    {   
        x = lastX;
    }
    
    // y movements
    y += lengthdir_y(dis,dir);
    var colblock = scr_ChunkGetBlock(ActiveChunk, x,y,BlockGridType.walls);
    if( !(colblock == -1 || !scr_BlockRules(colblock,"Solid")))
    {
        y = lastY;
    }
    
    
    
    
    
    // calculate falling speed
    Zmomentum += scr_TimeCompensate(global._gravity);
    
    // find lowest point for shadow, and as a ground check for falling!
    var checkDist = 8;
    attemptedGround = z+512;
    
    var blockUnderG = scr_ChunkGetBlock(ActiveChunk, x,y,BlockGridType.ground);
    var blockUnderF = scr_ChunkGetBlock(ActiveChunk, x,y,BlockGridType.floors);
    if(blockUnderF != -1)
    {
        attemptedGround = 0;
    }
    else if(blockUnderG != -1)
    {
        attemptedGround = 0;
    }
    
    
    // apply falling speed
    z += scr_TimeCompensate(Zmomentum);
    
    
     
    // if falling, check if we've reached under our shadow position!
    if(Zmomentum &gt;= 0)
    {
        z = min(z,attemptedGround); // lock to ground
    
        if(z == attemptedGround)
        {
            // stop
            Zmomentum = 0;
            // jumping!
            if(keyboard_check(global.keyJump))
            {
                Zmomentum = -32;
            }
        }
    }

    
    // draw depth
    depth = scr_DrawDepth(x,y,z);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(instance_exists(ActiveChunk))
{
    for (q=0; q&lt;global.chunkWidth; q+=1)
    {
        for (c=0; c&lt;global.chunkHeight; c+=1)
        {
            draw_text(q*24,c*24,ActiveChunk.zdata[# q,c]);
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_shadow,image_index,x,y + scr_DrawYOffset(attemptedGround),1,1,0,image_blend,1);
draw_sprite_ext(spr_playerTest,image_index,x,y + scr_DrawYOffset(z),1,1,0,image_blend,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
