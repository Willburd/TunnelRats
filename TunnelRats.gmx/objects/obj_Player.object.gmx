<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_WorldEntityParent</parentName>
  <maskName>spr_colMask8x</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Data
Nmomentum = 0;
Zmomentum = 0;
attemptedGround = -1;

crouching = false;
toolUseCounter = 0;

previousToolX = 0;
previousToolY = 0;
previousToolZ = 0;

myHighlight = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// first spawn code!

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement code
var hasCamera = false;
with obj_HudController
{
    if(followObject == other.id) hasCamera = true;
}

if(loadedCheck)
{
    if(attemptedGround == -1)
    {
        // snap to ground on spawn
        var foundGround = false
        while (foundGround == false)
        {
            var block = scr_ChunkGetBlock( ActiveChunk, x, y, z);
            
            if(block == -2)
            {
                // nothing to read yet...
                global.currentCameraZLevel = global.worldData[? "seaLevel"];
                break;
            }
            else if(block == -1)
            {
                z += 16;
            }
            else
            {
                foundGround = true;
                z -= 17;
                attemptedGround  = z;
                break;
            }
        }
        
        // try again next loop, or jump right into it when ready!
        if(attemptedGround == -1) return 0;
    }

    // check crouching state 
    crouching = false;
    if(keyboard_check(global.keyCrouch))
    {
        crouching = true;
    }
    
    
    
    // tool highlighter
    if(!instance_exists(myHighlight))
    {
        myHighlight = instance_create(x,y,obj_HighLightBlock);
    }
    
    // Using a tool!
    var toolX = 0;
    var toolY = 0;
    var toolZ = 0;
    
    // keyboard check!
    if(keyboard_check(global.keyUseLeft)) toolX += -1;
    if(keyboard_check(global.keyUseRight)) toolX += 1;
    if(keyboard_check(global.keyUseUp) &amp;&amp; toolX == 0) toolY += -1;
    if(keyboard_check(global.keyUseDown) &amp;&amp; toolX == 0) toolY += 1;
    if(keyboard_check(global.keyUseTop)) 
    {
        toolZ = -1;
    }
    else if(keyboard_check(global.keyUseBot))
    {
        toolZ = 1;
    }
    
    
    var usingTool = false;
    // check if tool use is consistant!
    if(previousToolX != toolX || previousToolY != toolY || previousToolY != toolY)
    {
        // reset tool
        toolUseCounter = -1;
    }
    else if( toolX != 0 || toolY != 0 || toolZ != 0)
    {
        // tool is consistant and counting up!
        toolUseCounter += 0.01;
        usingTool = true;
    }
    else
    {
        // tool recovery counter when not in use
        if(toolUseCounter&lt;0)
        {
            toolUseCounter += scr_TimeCompensate(1);
        }
        else
        {
            toolUseCounter = 0;
        }
    }
    
    
    // acts different base on if placing or breaking!
    if(usingTool)
    {
        if(toolZ == -1 &amp;&amp; (toolX != 0 || toolY != 0))
        {
            var colblockTop = scr_ChunkGetBlock(ActiveChunk, x,y,z-16);
            if( (colblockTop != -2 &amp;&amp; !(colblockTop == -1 || !ds_map_find_value(colblockTop,"Solid"))))
            {
                // if block above us and trying to go diagonal, hit the ceiling instead!
                toolX = 0;
                toolY = 0;
            }
        }
        if(toolZ == 1 &amp;&amp; (toolX != 0 || toolY != 0))
        {
            var colblockBot = scr_ChunkGetBlock(ActiveChunk, x + (toolX * 16),y + (toolY * 16),z);
            if( (colblockBot != -2 &amp;&amp; !(colblockBot == -1 || !ds_map_find_value(colblockBot,"Solid"))))
            {
                // if trying to mine diagonal down, but wall in way, hit wall instead
                toolZ = 0;
            }
        }
    
    
        myHighlight.visible = true;
        myHighlight.x = floor((x + (toolX * 16))/16)*16;
        myHighlight.y = floor((y + (toolY * 16))/16)*16;
        myHighlight.z = floor((z + (toolZ * 16))/16)*16;
        myHighlight.depth = scr_DrawDepth(myHighlight.x,myHighlight.y,myHighlight.z)-1;
        
        
        var blockPlaceMode = false;
        if( blockPlaceMode)
        {
            myHighlight.image_alpha = inverse_lerp(-1,0,toolUseCounter);
            if(toolUseCounter == 0)
            {
                // When placing blocks, do it instantly and than do cooldown
                if(scr_ChunkGetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16),z + (toolZ * 16)) == -1)
                {
                    var newBlock = scr_GetBlockObject("Base:Brick");
                    scr_ChunkSetBlock(global.selectedObject.chunkOwner,x + (toolX * 16) ,y + (toolY * 16),z + (toolZ * 16),newBlock);
                }
                toolUseCounter = -1;
            }
        }
        else
        {
            myHighlight.image_alpha = inverse_lerp(0,1,max(-1,toolUseCounter));
            if(toolUseCounter &gt;= 1)
            {
                // test delete block!
                scr_ChunkSetBlock(ActiveChunk,x + (toolX * 16) ,y + (toolY * 16),z + (toolZ * 16),-1);
                toolUseCounter = -1;
            }
        }
    }
    else
    {
        myHighlight.visible = false;
    }
    
    // store previous tool data
    previousToolX = toolX;
    previousToolY = toolY;
    previousToolZ = toolZ;
    
    
    
    
    
    
    
    

    var block = scr_ChunkGetBlock(ActiveChunk, x,y,z);
    if(block != -2) // do not move if block is unloaded
    {
        // control movement
        var UD = 0;
        var LR = 0;
        if(keyboard_check(global.keyLeft)) LR += -1;
        if(keyboard_check(global.keyRight)) LR += 1;
        if(keyboard_check(global.keyUp)) UD += -1;
        if(keyboard_check(global.keyDown)) UD += 1;
        
        // apply movement acceleration
        if(UD != 0 || LR != 0)
        {
            if(Nmomentum &lt; 11)
            {
                Nmomentum += 2.8;
            }
        }
        else
        {
            Nmomentum *= 0.08;
            if(Nmomentum &lt; 0.01)
            {
                Nmomentum = 0;
            }
        }
        var dir = point_direction(0,0, LR, UD);
        var dis = scr_TimeCompensate(Nmomentum);
        var lastX = x;
        var lastY = y;
        
        
        // x movements
        x += lengthdir_x(dis,dir);
        var colblock = scr_ChunkGetBlock(ActiveChunk, x,y,z);
        if( !(colblock != -2 &amp;&amp; (colblock == -1 || !ds_map_find_value(colblock,"Solid"))))
        {   
            x = lastX;
        }
        if( crouching )
        {
            var colblockUnder = scr_ChunkGetBlock(ActiveChunk, x,y,z+16);
            if( (colblockUnder != -2 &amp;&amp; (colblockUnder == -1 || !ds_map_find_value(colblockUnder,"Solid"))))
            {
                // stay on ledges if crouching
                x = lastX;
            }
        }
        
        // y movements
        y += lengthdir_y(dis,dir);
        var colblock = scr_ChunkGetBlock(ActiveChunk, x,y,z);
        if( !(colblock != -2 &amp;&amp; (colblock == -1 || !ds_map_find_value(colblock,"Solid"))))
        {
            y = lastY;
        }
        if( crouching )
        {
            var colblockUnder = scr_ChunkGetBlock(ActiveChunk, x,y,z+16);
            if( (colblockUnder != -2 &amp;&amp; (colblockUnder == -1 || !ds_map_find_value(colblockUnder,"Solid"))))
            {
                // stay on ledges if crouching
                y = lastY;
            }
        }
        
        
        
        
        
        // calculate falling speed
        Zmomentum += scr_TimeCompensate(global._gravity);
        
        // find lowest point for shadow, and as a ground check for falling!
        var checkDist = 8;
        attemptedGround = z;
        while(attemptedGround &lt;= z + 512)
        {
            var blockUnder = scr_ChunkGetBlock(ActiveChunk, x,y,attemptedGround);
            if(blockUnder == -2)
            {
                // hard physics fail, due to unloaded chunk
                attemptedGround = z + 512;
                break;
            }
            else if(blockUnder == -1 || ds_map_find_value(blockUnder,"Solid") == false)
            {
                // empty air!
                attemptedGround += checkDist;
            }
            else
            {
                // found a block to land on!
                attemptedGround = (floor((attemptedGround)/16)*16)-1;
                break;
            }
        }
        
        // apply falling speed
        var zMotion = scr_TimeCompensate(Zmomentum);
        if(zMotion &lt; 0)
        {
            var colblockTop = scr_ChunkGetBlock(ActiveChunk, x,y,z-16);
            if(colblockTop == -2 || !(colblockTop == -1 || !ds_map_find_value(colblockTop,"Solid")))
            {
                Zmomentum = -1;
                zMotion = scr_TimeCompensate(Zmomentum);
                // bonk!
            }
        }
        z += zMotion;
        
        
        
         
        // if falling, check if we've reached under our shadow position!
        if(Zmomentum &gt;= 0)
        {
            z = min(z,attemptedGround); // lock to ground
        
            if(z == attemptedGround)
            {
                // set camera location
                if(hasCamera) global.currentCameraZLevel = lerp(global.currentCameraZLevel, z/16, 0.2);
                // stop
                Zmomentum = 0;
                // jumping!
                if(keyboard_check(global.keyJump))
                {
                    if(hasCamera) global.currentCameraZLevel = lerp(global.currentCameraZLevel, z/16, 0.2);
                    Zmomentum = -32;
                }
            }
            else
            {
                if(z/16 &gt; global.currentCameraZLevel +2)
                {
                    global.currentCameraZLevel = lerp(global.currentCameraZLevel, z/16, 0.4);
                }
            }
        }
    }
    
    
    
    // draw depth
    depth = scr_DrawDepth(x,y,z);
}
else
{
    if(hasCamera) global.currentCameraZLevel = z/16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_shadow,image_index,x,y + scr_DrawYOffset(x,y,attemptedGround)-8,1,1,0,image_blend,1);
if(crouching)
{
    draw_sprite_ext(spr_playerCrouch,image_index,x,y + scr_DrawYOffset(x,y,z)-8,1,1,0,image_blend,1);
}
else
{
    draw_sprite_ext(spr_playerTest,image_index,x,y + scr_DrawYOffset(x,y,z)-8,1,1,0,image_blend,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
