<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_WorldChunk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chunkWidth = 10;
chunkHeight = 10;
chunkDepth = 8; // z update range

processing = true; // if entitys should be updated
rendering = false; // if chunk is drawn


entitys = ds_list_create();
blockLayers = ds_list_create(); // active block objects

activeLayers = ds_queue_create(); // layers that were active last frame, used for cleanup
drawQueue = ds_priority_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(entitys);
ds_list_destroy(blockLayers);
ds_queue_destroy(activeLayers);
ds_priority_destroy(drawQueue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extend chunk downwards
var startLayer = ds_list_size(blockLayers);
for (var i=0; i&lt;chunkDepth; i+=1)
{   
    // layers start unloaded
    blockLayers[| startLayer + i] = -1;
};

processing = true; // if entitys should be updated
rendering = true; // if chunk is drawn

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// chunk update, updates entities in chunk
if(point_distance(x + 16 * (chunkWidth/2) ,y + 16 * (chunkHeight/2),view_xview[0]+(view_wview[0]/2),view_yview[0]+(view_hview[0]/2)) &lt; 260)
{
    processing = true;
}

// drop out if entity has unloaded
if(!processing) exit;

startUpdateZ = max(global.currentCameraZLevel-(chunkDepth/2),0);
// unload layers as needed
while(ds_queue_size(activeLayers) &gt; 0)
{
    var lay = ds_queue_dequeue(activeLayers);

    if(lay &lt; startUpdateZ || lay &gt;= startUpdateZ + chunkDepth)
    {
        var gridLayer = blockLayers[| lay];        
        // unload layer
    }
}

// clear draw update list
ds_priority_clear(drawQueue);

// update the blocks
for (var i=startUpdateZ; i&lt;startUpdateZ+chunkDepth; i+=1)
{
    if(i &gt;= ds_list_size(blockLayers))
    {
        // expand size downwards
        event_user(1);
    }
    
    var gridLayer = blockLayers[| i];
    
    // spawn layer if not loaded
    if(gridLayer == -1)
    {
        gridLayer = ds_grid_create( chunkWidth, chunkHeight);
        
        // spawn objects
        for (var q=0; q&lt;chunkWidth; q+=1)
        {
            for (var c=0; c&lt;chunkHeight; c+=1)
            {
                // get a ds_map of the block at the location
                var blockData = scr_GetBlockObject( choose("Base:Air","Base:Grass","Base:Rock" ));
            
                if(blockData != -1)
                {
                    blockData[? "x"] = x + q*16;
                    blockData[? "y"] = y + c*16;
                    blockData[? "z"] = i * 16;
                    
                    blockData[? "DrawDepth"] = -c + (i*1000);
                    blockData[? "Hidden"] = -1; //auto refresh draw status
                    
                    gridLayer[# q,c] = blockData;
                }
                else
                {
                    gridLayer[# q,c] = -1;
                }
            }
        }
        
        // assign layer as active
        blockLayers[| i] = gridLayer;
    }
    
    // call update in each block
    for (q=0; q&lt;chunkWidth; q+=1)
    {
        for (c=0; c&lt;chunkHeight; c+=1)
        {
            // get block data
            var blockData = gridLayer[# q,c];
            if(blockData != -1)
            {
            
                // run update script for block type
                
                // do exposure checks here if it was updated!
                
                // set visual state of block for drawing
                if(blockData[? "Hidden"] == -1)
                {
                    // refresh status
                    blockData[? "Hidden"] = !scr_BlockExposureCheck(blockLayers,i,q,c);
                }
                if(!blockData[? "Hidden"])
                {
                    // store the data for drawing!
                    ds_priority_add(drawQueue,blockData,blockData[? "DrawDepth"]);
                }
            }
        }
    }
    
    // set layer as used last frame
    ds_queue_enqueue(activeLayers,i);
}


// update the entities inside me!
for (var i=0; i&lt;ds_list_size(entitys); i+=1)
{
    with entitys[| i]
    {
        // update the entities inside me!
        event_user(0);
    }
}





// set if we are loaded next frame
if(point_distance(x + 16 * (chunkWidth/2) ,y + 16 * (chunkHeight/2),view_xview[0]+(view_wview[0]/2),view_yview[0]+(view_hview[0]/2)) &gt;= 160)
{
    processing = false;
    rendering = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(entitys);
ds_list_destroy(blockLayers);
ds_queue_destroy(activeLayers);
ds_priority_destroy(drawQueue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the world chunk based on the zlayer camera
if(!rendering) exit;

// hold the last updated draw priority queue, and make a disposable priority queue to burn through
var disposableQueue = ds_priority_create();
ds_priority_copy(disposableQueue, drawQueue);

// burn through all drawable objects
while(ds_priority_size(disposableQueue) &gt; 0)
{
    var blockData = ds_priority_delete_max(disposableQueue);
    var ZLevel = floor(blockData[? "z"]/16);
    var solveAlpha = (global.currentCameraZLevel - ZLevel) / -4;
    
    if(blockData != -1) 
    {
        if(scr_ZLayerDrawFilter(ZLevel))
        {
            draw_sprite_ext(blockData[? "Tex"],0,x + blockData[? "x"],y + blockData[? "y"] + (blockData[? "z"]),1,1,0,image_blend,1);
            draw_sprite_ext(spr_blockDarken,0,x + blockData[? "x"],y + blockData[? "y"] + (blockData[? "z"]),1,1,0,image_blend,solveAlpha);
        }
    }
}

ds_priority_destroy(disposableQueue); //cleanup
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
