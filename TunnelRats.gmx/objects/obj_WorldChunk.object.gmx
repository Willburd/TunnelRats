<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_WorldChunk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_colMask8x</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chunkDepth = 16; // z update range

processing = true; // if entitys should be updated
rendering = true; // if chunk is drawn

forceRenderUpdate = false;
updateTimerMax = 90; // delay between updates
updateTimer = 0; // timer for it

entitys = ds_list_create();
blockLayers = ds_list_create(); // active block objects

activeLayers = ds_queue_create(); // layers that were active last frame, used for cleanup
drawQueue = ds_priority_create();

worldController = noone;

neighbour_north = noone;
neighbour_south = noone;
neighbour_east = noone;
neighbour_west = noone;


if(file_exists(working_directory + "/Worlds/" + string(global.worldData[? "name"]) + "/Chunks/" + string(x/16) + "o" + string(y/16) + ".dat"))
{
    show_debug_message("STARTED Loading chunk " + string(id));
    scr_LoadChunk(id);
    show_debug_message("Loaded chunk " + string(id));
}
else
{
    show_debug_message("Spawned chunk " + string(id));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SaveChunk(id);

ds_list_destroy(entitys);
ds_list_destroy(blockLayers);
ds_queue_destroy(activeLayers);
ds_priority_destroy(drawQueue);

var chunkId = id;

with worldController
{
    for (var i=0; i&lt;ds_list_size(loadedChunkList); i+=1)
    {
        if(loadedChunkList[| i] == chunkId)
        {
            show_debug_message("Unloaded chunk " + string(chunkId));
            ds_list_delete(loadedChunkList,i);
            break;
        }
    }  
}


// disconnect neighbouring chunks
if(neighbour_north != noone) with neighbour_north { neighbour_south = noone };
if(neighbour_south != noone) with neighbour_south { neighbour_north = noone };
if(neighbour_east != noone) with neighbour_east { neighbour_west = noone };
if(neighbour_west != noone) with neighbour_west { neighbour_east = noone };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extend chunk downwards till we match camera
while(ds_list_size(blockLayers) &lt; global.currentCameraZLevel + chunkDepth)
{
    var startLayer = ds_list_size(blockLayers);
    for (var i=0; i&lt;chunkDepth; i+=1)
    {   
        // layers start unloaded
        blockLayers[| startLayer + i] = -1;
    }
}

show_debug_message("extended chunk " + string(id) + " to size " + string(ds_list_size(blockLayers)));

processing = true; // if entitys should be updated
rendering = true; // if chunk is drawn
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// chunk update, updates entities in chunk
// drop out if entity has unloaded
updateTimer--;
if(updateTimer &lt; -updateTimerMax)
{
    instance_destroy();
    exit;
}
// update lockdown
if(updateTimer &gt; 0) exit; // skip update
updateTimer = updateTimerMax;



// draw distance check
if(rectangle_in_rectangle(x,y,x+global.chunkWidth*16,y+global.chunkHeight*16,view_xview[0]-64,view_yview[0]-64,view_xview[0]+view_wview[0]+64,view_yview[0]+view_hview[0]+64) &gt; 0)
{
    rendering = true;
}
else
{
    rendering = false;
}
// clear draw update list
ds_priority_clear(drawQueue);



// update the blocks
startUpdateZ = max(global.currentCameraZLevel-(chunkDepth/2),0);
var startAlt = startUpdateZ;
// if the top of the chunk is not genned already we need to do a full gen....
if(ds_list_size(blockLayers) &lt; startUpdateZ)
{
    startAlt = ds_list_size(blockLayers);
}

for (var i=startAlt; i&lt;startUpdateZ+chunkDepth; i+=1)
{
    if(i &gt;= ds_list_size(blockLayers))
    {
        // expand size downwards
        event_user(1);
    }
    
    var gridLayer = blockLayers[| i];
    
    // spawn layer if not loaded
    if(gridLayer == -1)
    {
        gridLayer = ds_grid_create( global.chunkWidth, global.chunkHeight);
        
        // spawn objects
        for (var q=0; q&lt;global.chunkWidth; q+=1)
        {
            for (var c=0; c&lt;global.chunkHeight; c+=1)
            {
                // get a ds_map of the block at the location
                var blockData = scr_WorldGenBlock(blockLayers,i,x/16,y/16,q,c);
                
                if(blockData != -1)
                {
                    blockData[? "x"] = q*16;
                    blockData[? "y"] = c*16;
                    blockData[? "z"] = i * 16;
                    
                    blockData[? "DrawDepth"] = -c + (i*1000);
                    blockData[? "Exposed"] = -1; //auto refresh draw status
                    
                    gridLayer[# q,c] = blockData;
                }
                else
                {
                    gridLayer[# q,c] = -1;
                }
            }
        }
        
        // assign layer as active
        blockLayers[| i] = gridLayer;
    }
    
    if(i &gt;= startUpdateZ)
    {
        // call update in each block
        for (q=0; q&lt;global.chunkWidth; q+=1)
        {
            for (c=0; c&lt;global.chunkHeight; c+=1)
            {
                // get block data
                var blockData = gridLayer[# q,c];
                if(blockData != -1)
                {
                    // run update script for block type
                    
                    // do exposure checks here if it was updated!
                    
                    // set visual state of block for drawing
                    if(blockData[? "Exposed"] == -1 || forceRenderUpdate)
                    {
                        // refresh status
                        blockData[? "Exposed"] = scr_BlockExposureCheck(blockLayers,i,q,c);
                    }
                    if(blockData[? "Exposed"])
                    {
                        // store the data for drawing!
                        if(scr_ZLayerDrawFilter(i)) ds_priority_add(drawQueue,blockData,blockData[? "DrawDepth"]);
                    }
                }
            }
        }
        
        // set layer as used last frame
        ds_queue_enqueue(activeLayers,i);
    }
}


// update the entities inside me!
for (var i=0; i&lt;ds_list_size(entitys); i+=1)
{
    with entitys[| i]
    {
        // update the entities inside me!
        event_user(0);
    }
}



// cleanup one loop flags
forceRenderUpdate = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SaveChunk(id);

ds_list_destroy(entitys);
ds_list_destroy(blockLayers);
ds_queue_destroy(activeLayers);
ds_priority_destroy(drawQueue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the world chunk based on the zlayer camera
if(!rendering) exit;

// hold the last updated draw priority queue, and make a disposable priority queue to burn through
var disposableQueue = ds_priority_create();
ds_priority_copy(disposableQueue, drawQueue);

// burn through all drawable objects
while(ds_priority_size(disposableQueue) &gt; 0)
{
    var blockData = ds_priority_delete_max(disposableQueue);
    var ZLevel = floor(blockData[? "z"]/16);
    var solveAlpha = ((global.currentCameraZLevel - ZLevel)-2) / -global.drawLayerDepth;
    
    var xx = blockData[? "x"];
    var yy = blockData[? "y"];
    
    // TODO use "z" instead of fixed value "z" is the actual z value from the top of the world at 16px per block
    var yOffset = 8 * (ZLevel - global.currentCameraZLevel);
    
    if(blockData != -1) 
    {
        if(ZLevel &gt;= global.currentCameraZLevel)
        {
            draw_sprite_ext(blockData[? "Tex"],0, x + xx, y + yy + yOffset, 1, 1, 0, image_blend, 1);
            draw_sprite_ext(spr_blockDarken,0   , x + xx, y + yy + yOffset, 1, 1, 0, image_blend, solveAlpha);
        }
        else if(ZLevel == global.currentCameraZLevel-1)
        {
            draw_sprite_ext(blockData[? "Tex"],0, x + xx, y + yy + yOffset, 1, 1, 0, image_blend, 1);
            draw_sprite_ext(spr_blockDarken,0   , x + xx, y + yy + yOffset, 1, 1, 0, image_blend, 0.1);
        }
        else
        {
            draw_sprite_ext(blockData[? "Tex"],0, x + xx, y + yy + yOffset, 1, 1, 0, image_blend, 1);
        }
        
        
        if(blockData[? "Exposed"] == 2)
        {
            draw_sprite_ext(spr_blockBackReveal,0   , x + xx, y + yy + yOffset, 1, 1, 0, image_blend, 1);
        }
    }
}

ds_priority_destroy(disposableQueue); //cleanup



/*
if(neighbour_north != noone) draw_arrow(x,y,neighbour_north.x,neighbour_north.y,5);
if(neighbour_south != noone) draw_arrow(x,y,neighbour_south.x,neighbour_south.y,5);
if(neighbour_east != noone) draw_arrow(x,y,neighbour_east.x,neighbour_east.y,5);
if(neighbour_west != noone) draw_arrow(x,y,neighbour_west.x,neighbour_west.y,5);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
