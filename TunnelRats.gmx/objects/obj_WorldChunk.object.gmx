<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_WorldChunk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_colMask8x</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chunkDepth = 8; // z update range

initialGen = true;
processing = true; // if entitys should be updated
rendering = true; // if chunk is drawn

forceRenderUpdate = false;
updateTimerMax = 20; // delay between updates
updateTimer = 0; // timer for it

entitys = ds_list_create(); // all entity ds_map datas
blockLayers = ds_list_create(); // active block objects

activeLayers = ds_queue_create(); // layers that were active last frame, used for cleanup
puppetBlocks = ds_list_create();

worldController = noone;

neighbour_north = noone;
neighbour_south = noone;
neighbour_east = noone;
neighbour_west = noone;
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SaveChunk(worldController.UniverseNumber,id);

ds_list_destroy(entitys);
ds_list_destroy(blockLayers);
while (ds_list_size(puppetBlocks) &gt; 0)
{
    tile_delete( puppetBlocks[| 3]);
    ds_list_delete(puppetBlocks, 0);
    ds_list_delete(puppetBlocks, 0);
    ds_list_delete(puppetBlocks, 0);
    ds_list_delete(puppetBlocks, 0);
}
ds_list_destroy(puppetBlocks);
ds_queue_destroy(activeLayers);

var chunkId = id;

with worldController
{
    for (var i=0; i&lt;ds_list_size(loadedChunkList); i+=1)
    {
        if(loadedChunkList[| i] == chunkId)
        {
            if(global.debug_ChunkLoadingInfo) show_debug_message("Unloaded chunk " + string(chunkId));
            ds_list_delete(loadedChunkList,i);
            break;
        }
    }  
}


// disconnect neighbouring chunks
if(neighbour_north != noone) with neighbour_north { neighbour_south = noone };
if(neighbour_south != noone) with neighbour_south { neighbour_north = noone };
if(neighbour_east != noone) with neighbour_east { neighbour_west = noone };
if(neighbour_west != noone) with neighbour_west { neighbour_east = noone };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extend chunk downwards till we match camera
var startLayer = ds_list_size(blockLayers);
var genDepths = chunkDepth;

if(startLayer &lt; global.currentCameraZLevel - chunkDepth*4)
{
    initialGen = true; //fast gen!
}

if(initialGen)
{
    genDepths *= 2;
    if(startLayer + genDepths &gt; global.currentCameraZLevel)
    {
        if(global.debug_ChunkLoadingInfo) show_debug_message("ended accelerated generation, chunk " + string(id));
        initialGen = false;
        scr_SaveChunk(worldController.UniverseNumber,id);
    }
}
for (var i=0; i&lt;genDepths; i+=1)
{   
    var depthLayer = startLayer + i;

    // create a new layer!
    var gridLayer = ds_grid_create( global.chunkWidth, global.chunkHeight);
    blockLayers[| depthLayer] = gridLayer; // activate layer for world gen!
    
    // spawn objects
    for (var q=0; q&lt;global.chunkWidth; q+=1)
    {
        for (var c=0; c&lt;global.chunkHeight; c+=1)
        {
            // get a ds_map of the block at the location
            var blockData = scr_WorldGenBlock(blockLayers,depthLayer,x/16,y/16,q,c);
            scr_ChunkInternalSetBlock(id, q,c,depthLayer,blockData);
        }
    }
}


if(global.debug_ChunkLoadingInfo) show_debug_message("generated chunk " + string(id) + " from size " + string(startLayer) + " to " + string(ds_list_size(blockLayers)));


processing = true; // if entitys should be updated
rendering = true; // if chunk is drawn
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// chunk update, updates entities in chunk

// drop out if entity has unloaded
updateTimer--;
if(updateTimer &lt; -updateTimerMax &amp;&amp; global.unloadingTimer == 0 &amp;&amp; rectangle_in_rectangle(x,y,x+global.chunkWidth*16,y+global.chunkHeight*16,view_xview[0]-256,view_yview[0]-256,view_xview[0]+view_wview[0]+256,view_yview[0]+view_hview[0]+256) == 0)
{
    // out of range!
    instance_destroy();
    global.unloadingTimer = -1;
    exit;
}

// update lockdown
if(updateTimer &gt; 0) exit; // skip update
updateTimer = updateTimerMax + irandom(20);
if(initialGen) updateTimer = 6;

// draw distance check
if(rectangle_in_rectangle(x,y,x+global.chunkWidth*16,y+global.chunkHeight*16,view_xview[0]-64,view_yview[0]-64,view_xview[0]+view_wview[0]+64,view_yview[0]+view_hview[0]+64) &gt; 0)
{
    rendering = true;
}
else
{
    rendering = false;
}

// update the blocks
startUpdateZ = max(global.currentCameraZLevel-(chunkDepth/2),0);
var startAlt = startUpdateZ;
// if the top of the chunk is not genned already we need to do a full gen....
if(ds_list_size(blockLayers) == 0 || ds_list_size(blockLayers) &lt; startUpdateZ)
{
    startAlt = ds_list_size(blockLayers);
}

ds_queue_clear(activeLayers);
for (var i=startAlt; i&lt;startUpdateZ+chunkDepth; i+=1)
{
    // check if we should expand generation this update
    if(ds_list_size(blockLayers) == 0 || startUpdateZ+chunkDepth &gt;= ds_list_size(blockLayers))
    {
        // expand size downwards
        event_user(1);
    }
    
    // check if we've progressively loaded deep enough for this to start updating
    if(startUpdateZ+chunkDepth &gt;= ds_list_size(blockLayers))
    {
        // not progressively loaded yet!
        break;
    }
    
    // block updates!
    var gridLayer = blockLayers[| i];
    if(i &gt;= startUpdateZ)
    {
        // call update in each block
        for (q=0; q&lt;global.chunkWidth; q+=1)
        {
            for (c=0; c&lt;global.chunkHeight; c+=1)
            {
                // get block data
                var blockData = gridLayer[# q,c];
                if(blockData != -1)
                {
                    // run update script for block type
                    if(blockData[? "NeedUpdate"])
                    {
                        blockData[? "NeedUpdate"] = false;
                        blockData[? "Exposed"] = -1; // if the update made us change visual data in the chunk!
                    }
                    
                    // set visual state of block for drawing
                    if(rendering &amp;&amp; (blockData[? "Exposed"] == -1 || forceRenderUpdate || (rendering &amp;&amp; ds_list_size(puppetBlocks) == 0)))
                    {
                        // refresh status
                        var xxx = blockData[? "x"];
                        var yyy = blockData[? "y"];
                        var zzz = blockData[? "z"];
                        if(scr_ZLayerDrawFilter(i))
                        {
                            blockData[? "Exposed"] = scr_BlockExposureCheck(blockLayers,i,q,c);
                        }
                        else
                        {
                            blockData[? "Exposed"] = exposureType.none;
                        }
                        
                        // draw depending on exposure!
                        if(blockData[? "Exposed"] &gt; 0)
                        {
                            // remove old puppet
                            for (var k=0; k&lt;ds_list_size(puppetBlocks); k+=4)
                            {
                                if(puppetBlocks[| k+0] == xxx &amp;&amp; puppetBlocks[| k+1] == yyy &amp;&amp; puppetBlocks[| k+2] == zzz)
                                {
                                    tile_delete( puppetBlocks[| k+3]);
                                    ds_list_delete(puppetBlocks, k+0);
                                    ds_list_delete(puppetBlocks, k+0);
                                    ds_list_delete(puppetBlocks, k+0);
                                    ds_list_delete(puppetBlocks, k+0);
                                    break;
                                }
                            }
                        
                            // spawn updated puppet!
                            var newPuppet = scr_BlockDataToTile(blockData,gridLayer,i,id);
                            ds_list_add(puppetBlocks, xxx);
                            ds_list_add(puppetBlocks, yyy);
                            ds_list_add(puppetBlocks, zzz);
                            ds_list_add(puppetBlocks, newPuppet);
                        
                        }
                        else
                        {
                            // remove old puppet
                            for (var k=0; k&lt;ds_list_size(puppetBlocks); k+=4)
                            {
                                if(puppetBlocks[| k+0] == xxx &amp;&amp; puppetBlocks[| k+1] == yyy &amp;&amp; puppetBlocks[| k+2] == zzz)
                                {
                                    tile_delete( puppetBlocks[| k+3]);
                                    ds_list_delete(puppetBlocks, k+0);
                                    ds_list_delete(puppetBlocks, k+0);
                                    ds_list_delete(puppetBlocks, k+0);
                                    ds_list_delete(puppetBlocks, k+0);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        // set layer as used last frame
        ds_queue_enqueue(activeLayers,i);
    }
}


// cleanup one loop flags
forceRenderUpdate = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SaveChunk(worldController.UniverseNumber,id);

ds_list_destroy(entitys);
ds_list_destroy(blockLayers);
while (ds_list_size(puppetBlocks) &gt; 0)
{
    tile_delete( puppetBlocks[| 3]);
    ds_list_delete(puppetBlocks, 0);
    ds_list_delete(puppetBlocks, 0);
    ds_list_delete(puppetBlocks, 0);
    ds_list_delete(puppetBlocks, 0);
}
ds_list_destroy(puppetBlocks);
ds_queue_destroy(activeLayers);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nodraw</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
